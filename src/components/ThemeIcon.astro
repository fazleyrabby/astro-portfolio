---

---

<button
  id="themeToggle"
  aria-label="Theme toggle"
  class="inline-flex justify-center text-black dark:hover:text-black rounded ml-auto outline-none group relative overflow-hidden hover:outline-slate-300"
>
  <svg
    id="moon"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke-width="1"
    stroke="currentColor"
    class=" dark:stroke-white dark:group:sroke-white dark:group-hover:stroke-black absolute transition-transform"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      d="M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z"
    ></path>
  </svg>


  <svg
    id="sun"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke-width="1"
    stroke="currentColor"
    class=" fill-yellow-400 dark:stroke-white transition-transform absolute"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z"
    ></path>
  </svg>
</button>

<!-- <style>
  #themeToggle {
    border: 0;
    background: none;
  }
  .sun { fill: black; }
  .moon { fill: transparent; }


  :global(.dark) .sun { fill: transparent; }
  :global(.dark) .moon { fill: white; }
</style> -->

<script>
  // document.getElementById("sun").style.display = "none";

  const darkModePreference = window.matchMedia("(prefers-color-scheme: dark)");
  // darkModePreference.addEventListener("change", e => setIcon(theme == "dark"));
  darkModePreference.addEventListener("change", (e) => handleToggleClick());
  const theme = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  setIcon(theme == "dark");

  if (theme === "light") {
    document.documentElement.classList.remove("dark");
  } else {
    document.documentElement.classList.add("dark");
  }

  window.localStorage.setItem("theme", theme);

  const handleToggleClick = () => {
    const element = document.documentElement;
    element.classList.toggle("dark");
    const isDark = element.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
    setIcon(isDark);
  };

  function setIcon(isDark) {
    if (isDark) {
      // document.getElementById("sun").style.display = "none";
      // document.getElementById("moon").style.display = "block";
      document.getElementById("moon").classList.add("active");
      document.getElementById("sun").classList.remove("active");
    } else {
      // document.getElementById("sun").style.display = "block";
      // document.getElementById("moon").style.display = "none";
      document.getElementById("moon").classList.remove("active");
      document.getElementById("sun").classList.add("active");
    }
  }

  document
    .getElementById("themeToggle")
    .addEventListener("click", handleToggleClick);
  // document.addEventListener("astro:page-load", () => {

  // });
</script>
